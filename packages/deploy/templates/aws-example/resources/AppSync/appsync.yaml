AWSTemplateFormatVersion: "2010-09-09"
Description: "AppSync Resources for the application"

Parameters:
  Stage:
    Type: String
    Description: Deployment stage (e.g., dev, prod)
    AllowedPattern: ^[a-zA-Z0-9-]+$
  AppName:
    Type: String
    Description: Application Name (e.g., awsb, wbc)
  TemplateBucketName:
    Type: String
    Description: S3 bucket containing templates and resolvers
  ResolversBuildHash:
    Type: String
    Description: Optional build hash used to version resolver S3 keys (set by deploy script)
  UserPoolId:
    Type: String
    Description: Cognito User Pool ID
  SendWelcomeEmailFunctionArn:
    Type: String
    Description: ARN of the Lambda function to send welcome emails
  CreateCognitoUserFunctionArn:
    Type: String
    Description: ARN of the Lambda function to create Cognito users

Resources:
  AppSyncLoggingServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AppName}-appsync-logging-role-${Stage}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AppName}-appsync-logging-policy-${Stage}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  GraphQlApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub "${AppName}-appsync-api-${Stage}"
      AuthenticationType: AMAZON_COGNITO_USER_POOLS
      UserPoolConfig:
        UserPoolId: !Ref UserPoolId
        DefaultAction: ALLOW
        AwsRegion: ap-southeast-2
      AdditionalAuthenticationProviders:
        - AuthenticationType: AWS_IAM
      LogConfig:
        CloudWatchLogsRoleArn: !GetAtt AppSyncLoggingServiceRole.Arn
        FieldLogLevel: ALL
        ExcludeVerboseContent: false

  GraphQlSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQlApi.ApiId
      DefinitionS3Location: !Sub "s3://${TemplateBucketName}/schema.graphql"

  MainTableDataSource: # Renamed from AWSBUsersTableDataSource for generality
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GraphQlApi.ApiId
      Name: !Sub "${AppName}MainTableDynamoDBDataSource" # Parameterized name
      Type: AMAZON_DYNAMODB
      DynamoDBConfig:
        TableName:
          Fn::ImportValue: !Sub "${AppName}-DataTableName-${Stage}" # Parameterized import
        AwsRegion: !Ref AWS::Region
      ServiceRoleArn:
        Fn::ImportValue: !Sub "${AppName}-AppSyncDynamoDBRoleArn-${Stage}" # Parameterized import

  SendWelcomeEmailDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GraphQlApi.ApiId
      Name: !Sub "${AppName}SendWelcomeEmailLambdaDataSource"
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !Ref SendWelcomeEmailFunctionArn
      ServiceRoleArn: !GetAtt AppSyncLambdaInvokeRole.Arn

  CreateCognitoUserDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GraphQlApi.ApiId
      Name: !Sub "${AppName}CreateCognitoUserLambdaDataSource"
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !Ref CreateCognitoUserFunctionArn
      ServiceRoleArn: !GetAtt AppSyncLambdaInvokeRole.Arn

  AppSyncLambdaInvokeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AppName}-appsync-lambda-invoke-role-${Stage}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AppName}-appsync-lambda-invoke-policy-${Stage}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Ref SendWelcomeEmailFunctionArn
                  - !Ref CreateCognitoUserFunctionArn

  # Resolvers - Assuming resolver field names (e.g., getAWSBUser) remain fixed in the schema for now
  # If these also need to change based on AppName, the schema and resolver configs would need more significant updates.
  GetAWSBUserResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GraphQlApi.ApiId
      TypeName: Query
      FieldName: getAWSBUser # This might need to be generic if schema changes
      DataSourceName: !GetAtt MainTableDataSource.Name # Updated to MainTableDataSource
      Kind: UNIT
      Runtime:
        Name: APPSYNC_JS
        RuntimeVersion: 1.0.0
      Code: !Sub "s3://${TemplateBucketName}/resolvers/${Stage}/${ResolversBuildHash}/users/Queries/Query.getAWSBUser.js"

  CreateAWSBUserResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GraphQlApi.ApiId
      TypeName: Mutation
      FieldName: createAWSBUser # This might need to be generic if schema changes
      Kind: PIPELINE
      PipelineConfig:
        Functions:
          - !GetAtt CreateCognitoUserFunction.FunctionId
          - !GetAtt CreateUserDynamoDBFunction.FunctionId
          - !GetAtt SendWelcomeEmailFunction.FunctionId
      Runtime:
        Name: APPSYNC_JS
        RuntimeVersion: 1.0.0
      Code: |
        export function request(ctx) {
          return {};
        }
        export function response(ctx) {
          return ctx.prev.result;
        }

  CreateCognitoUserFunction:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId: !GetAtt GraphQlApi.ApiId
      Name: !Sub "${AppName}CreateCognitoUserFunction"
      DataSourceName: !GetAtt CreateCognitoUserDataSource.Name
      Runtime:
        Name: APPSYNC_JS
        RuntimeVersion: 1.0.0
      Code: !Sub "s3://${TemplateBucketName}/resolvers/${Stage}/${ResolversBuildHash}/users/Functions/Function.createCognitoUser.js"

  CreateUserDynamoDBFunction:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId: !GetAtt GraphQlApi.ApiId
      Name: !Sub "${AppName}CreateUserDynamoDBFunction"
      DataSourceName: !GetAtt MainTableDataSource.Name
      Runtime:
        Name: APPSYNC_JS
        RuntimeVersion: 1.0.0
      Code: !Sub "s3://${TemplateBucketName}/resolvers/${Stage}/${ResolversBuildHash}/users/Mutations/Mutation.createAWSBUser.js"

  SendWelcomeEmailFunction:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId: !GetAtt GraphQlApi.ApiId
      Name: !Sub "${AppName}SendWelcomeEmailFunction"
      DataSourceName: !GetAtt SendWelcomeEmailDataSource.Name
      Runtime:
        Name: APPSYNC_JS
        RuntimeVersion: 1.0.0
      Code: !Sub "s3://${TemplateBucketName}/resolvers/${Stage}/${ResolversBuildHash}/users/Functions/Function.sendWelcomeEmail.js"

Outputs:
  AWSBAppSyncApiUrl:
    Value: !GetAtt GraphQlApi.GraphQLUrl
    Description: "GraphQL URL for the AppSync API"

  AWSBAppSyncRealtimeUrl:
    Value: !GetAtt GraphQlApi.RealtimeUrl
    Description: "Realtime URL for the AppSync API"

  AWSBAppSyncApiId:
    Value: !GetAtt GraphQlApi.ApiId
    Description: "API ID for the AppSync API"
