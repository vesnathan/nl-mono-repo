AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudWatch Live AppSync API Resources'

Parameters:
  Stage:
    Type: String
    Description: Deployment stage (e.g., dev, prod)
    AllowedPattern: ^[a-zA-Z0-9-]+$
  TemplateBucketName:
    Type: String
    Description: S3 bucket containing compiled resolver code

Resources:
  # AppSync GraphQL API
  CWLAppSyncApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub "cwl-appsync-api-${Stage}"
      AuthenticationType: AMAZON_COGNITO_USER_POOLS
      UserPoolConfig:
        UserPoolId:
          Fn::ImportValue: !Sub "nlmonorepo-shared-${Stage}-user-pool-id"
        DefaultAction: ALLOW
        AwsRegion: !Ref AWS::Region
      AdditionalAuthenticationProviders:
        - AuthenticationType: AWS_IAM

  # GraphQL Schema
  CWLAppSyncSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt CWLAppSyncApi.ApiId
      Definition: |
        schema {
          query: Query
        }

        type Query {
          getCWLUser(userId: String!): CWLUser
            @aws_cognito_user_pools
        }

        enum ClientType {
          SuperAdmin
          EventCompanyAdmin
          EventCompanyStaff
          TechCompanyAdmin
          TechCompanyStaff
          RegisteredAtendee
          UnregisteredAttendee
        }

        type CWLUser @aws_cognito_user_pools {
          userId: String!
          organizationId: String!
          privacyPolicy: Boolean!
          termsAndConditions: Boolean!
          userAddedById: String!
          userCreated: String!
          userEmail: String!
          userTitle: String!
          userFirstName: String!
          userLastName: String!
          userPhone: String!
          userRole: String!
          clientType: [ClientType!]!
        }

        input CWLUserInput {
          userEmail: String!
          userTitle: String!
          userFirstName: String!
          userLastName: String!
          userPhone: String!
          organizationId: String!
          userRole: String!
        }

  # DynamoDb Data Sources
  CWLUserTableDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt CWLAppSyncApi.ApiId
      Name: cwlUserTable
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      DynamoDBConfig:
        TableName:
          Fn::ImportValue: !Sub "cwlUserTableName-${Stage}"
        AwsRegion: !Ref AWS::Region

  # IAM Role for AppSync to access DynamoDb
  AppSyncServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "cwl-appsync-service-role-${Stage}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs
      Policies:
        - PolicyName: !Sub "cwl-appsync-dynamodb-policy-${Stage}"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - Fn::ImportValue: !Sub "cwlUserTableArn-${Stage}"
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:DescribeKey
                Resource:
                  - Fn::ImportValue: !Sub "nlmonorepo-shared-${Stage}-kms-key-arn"
        - PolicyName: !Sub "cwl-appsync-s3-access-policy-${Stage}"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${TemplateBucketName}"
                  - !Sub "arn:aws:s3:::${TemplateBucketName}/*"

  # Resolver for getCWLUser query
  GetCWLUserResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt CWLAppSyncApi.ApiId
      TypeName: Query
      FieldName: getCWLUser
      DataSourceName: !GetAtt CWLUserTableDataSource.Name
      Runtime:
        Name: APPSYNC_JS
        RuntimeVersion: 1.0.0
      CodeS3Location: !Sub "s3://${TemplateBucketName}/resolvers/${Stage}/users/Queries/Query.getCWLUser.js"

Outputs:
  CWLAppSyncApiUrl:
    Description: GraphQL URL for the CloudWatch Live AppSync API
    Value: !GetAtt CWLAppSyncApi.GraphQLUrl
    Export:
      Name: !Sub "CWLAppSyncApiUrl-${Stage}"

  CWLAppSyncApiId:
    Description: AppSync API ID for the CloudWatch Live API
    Value: !GetAtt CWLAppSyncApi.ApiId
    Export:
      Name: !Sub "CWLAppSyncApiId-${Stage}"

  CWLAppSyncRealtimeUrl:
    Description: Realtime URL for the CloudWatch Live AppSync API
    Value: !GetAtt CWLAppSyncApi.RealtimeUrl
    Export:
      Name: !Sub "CWLAppSyncRealtimeUrl-${Stage}"
