AWSTemplateFormatVersion: '2010-09-09'
Description: 'Lambda Resources for Application'

Parameters:
  Stage:
    Type: String
    Description: Deployment stage (e.g., dev, prod)
    AllowedPattern: ^[a-zA-Z0-9-]+$
  AppName:
    Type: String
    Description: Application Name (e.g., cwl, wbc)
  AppCloudFrontDistributionId: # Renamed from CWLCloudFrontDistributionId
    Type: String
    Description: ID of the CloudFront distribution
  AppCloudFrontDomainName: # Renamed from CWLCloudFrontDomainName
    Type: String
    Description: Domain name of the CloudFront distribution
  FromEmail:
    Type: String
    Description: Email address to send from (must be verified in SES)
    Default: noreply@cloudwatchlive.com
  AppURL:
    Type: String
    Description: Application URL for generating links
    Default: https://cloudwatchlive.com

Resources:
  PostDeployFunction: # Renamed from PostFrontEndDeployFunction
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "nlmonorepo-${AppName}-postdeploy-${Stage}" # Simplified and parameterized
      Handler: index.handler
      Runtime: nodejs18.x
      Timeout: 600
      Role: !GetAtt PostDeployRole.Arn # Renamed role
      Code:
        ZipFile: |
          const { CloudFront } = require("@aws-sdk/client-cloudfront");
          
          exports.handler = async (event) => {
            console.log('Post front-end deployment handler called');
            
            try {
              const CF = new CloudFront();
              // Env var name changed to be generic, value comes from AppCloudFrontDistributionId parameter
              const distributionId = process.env.AppCloudFrontDistributionId; 
              
              if (distributionId) {
                await CF.createInvalidation({
                  DistributionId: distributionId,
                  InvalidationBatch: {
                    CallerReference: Date.now().toString(),
                    Paths: {
                      Quantity: 1,
                      Items: ["/*"],
                    },
                  },
                });
                console.log(`Created invalidation for distribution ${distributionId}`);
              }
              
              return {
                statusCode: 200,
                body: JSON.stringify({ success: true })
              };
            } catch (error) {
              console.error('Error in handler:', error);
              return {
                statusCode: 500,
                body: JSON.stringify({ error: error.message })
              };
            }
          };
      Environment:
        Variables:
          STAGE: !Ref Stage
          AppCloudFrontDistributionId: !Ref AppCloudFrontDistributionId # Env var name and Ref updated

  PostDeployRole: # Renamed from PostFrontEndDeployRole
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "nlmonorepo-${AppName}-postdeploy-role-${Stage}" # Simplified and parameterized
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CloudFrontInvalidation
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudfront:CreateInvalidation
                  - cloudfront:GetInvalidation
                Resource: "*" # Consider restricting this to the specific distribution ARN if possible

  SendWelcomeEmailFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "nlmonorepo-${AppName}-send-welcome-email-${Stage}"
      Handler: index.handler
      Runtime: nodejs18.x
      Timeout: 30
      Role: !GetAtt SendWelcomeEmailRole.Arn
      Code:
        ZipFile: |
          const { SESClient, SendEmailCommand } = require('@aws-sdk/client-ses');
          
          const ses = new SESClient({ region: process.env.AWS_REGION });
          const FROM_EMAIL = process.env.FROM_EMAIL;
          const APP_URL = process.env.APP_URL;
          
          exports.handler = async (event) => {
            console.log('Sending welcome email to:', event.userEmail);
            
            const { userEmail, userFirstName, userLastName, userId } = event;
            const loginLink = `${APP_URL}/login?userId=${userId}`;
            
            const htmlBody = `
              <!DOCTYPE html>
              <html>
                <head>
                  <style>
                    body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
                    .container { max-width: 600px; margin: 0 auto; padding: 20px; }
                    .header { background-color: #4CAF50; color: white; padding: 20px; text-align: center; border-radius: 5px 5px 0 0; }
                    .content { background-color: #f9f9f9; padding: 30px; border-radius: 0 0 5px 5px; }
                    .button { display: inline-block; padding: 12px 30px; background-color: #4CAF50; color: white; text-decoration: none; border-radius: 5px; margin: 20px 0; }
                    .footer { text-align: center; margin-top: 20px; font-size: 12px; color: #666; }
                  </style>
                </head>
                <body>
                  <div class="container">
                    <div class="header"><h1>Welcome to CloudWatch Live!</h1></div>
                    <div class="content">
                      <p>Hello ${userFirstName} ${userLastName},</p>
                      <p>Your account has been created successfully. Click the button below to access your account:</p>
                      <div style="text-align: center;"><a href="${loginLink}" class="button">Access Your Account</a></div>
                      <p>If the button doesn't work, copy and paste this link into your browser:</p>
                      <p style="word-break: break-all; color: #4CAF50;">${loginLink}</p>
                      <p>If you have any questions, please don't hesitate to contact our support team.</p>
                      <p>Best regards,<br>The CloudWatch Live Team</p>
                    </div>
                    <div class="footer"><p>This is an automated message. Please do not reply to this email.</p></div>
                  </div>
                </body>
              </html>
            `;
            
            const textBody = `Welcome to CloudWatch Live!\n\nHello ${userFirstName} ${userLastName},\n\nYour account has been created successfully. Click the link below to access your account:\n\n${loginLink}\n\nIf you have any questions, please don't hesitate to contact our support team.\n\nBest regards,\nThe CloudWatch Live Team`;
            
            const command = new SendEmailCommand({
              Source: FROM_EMAIL,
              Destination: { ToAddresses: [userEmail] },
              Message: {
                Subject: { Data: 'Welcome to CloudWatch Live - Your Account is Ready!', Charset: 'UTF-8' },
                Body: {
                  Html: { Data: htmlBody, Charset: 'UTF-8' },
                  Text: { Data: textBody, Charset: 'UTF-8' }
                }
              }
            });
            
            try {
              const response = await ses.send(command);
              console.log('Email sent successfully:', response.MessageId);
              return { statusCode: 200, body: JSON.stringify({ message: 'Email sent successfully', messageId: response.MessageId }) };
            } catch (error) {
              console.error('Error sending email:', error);
              throw error;
            }
          };
      Environment:
        Variables:
          STAGE: !Ref Stage
          FROM_EMAIL: !Ref FromEmail
          APP_URL: !Ref AppURL

  SendWelcomeEmailRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "nlmonorepo-${AppName}-send-welcome-email-role-${Stage}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SESEmailSending
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: "*"

Outputs:
  PostDeployFunctionArn: # Renamed from PostFrontEndDeployFunctionArn
    Value: !GetAtt PostDeployFunction.Arn
    Description: ARN of the post-deploy Lambda function
  
  PostDeployFunctionName: # Renamed from PostFrontEndDeployFunctionName
    Value: !Ref PostDeployFunction
    Description: Name of the post-deploy Lambda function

  SendWelcomeEmailFunctionArn:
    Value: !GetAtt SendWelcomeEmailFunction.Arn
    Description: ARN of the send welcome email Lambda function
    Export:
      Name: !Sub "${AppName}-SendWelcomeEmailFunctionArn-${Stage}"
  
  SendWelcomeEmailFunctionName:
    Value: !Ref SendWelcomeEmailFunction
    Description: Name of the send welcome email Lambda function
