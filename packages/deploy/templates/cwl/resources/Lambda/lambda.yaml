AWSTemplateFormatVersion: '2010-09-09'
Description: 'Lambda Resources for Application'

Parameters:
  Stage:
    Type: String
    Description: Deployment stage (e.g., dev, prod)
    AllowedPattern: ^[a-zA-Z0-9-]+$
  AppName:
    Type: String
    Description: Application Name (e.g., cwl, wbc)
  AppCloudFrontDistributionId: # Renamed from CWLCloudFrontDistributionId
    Type: String
    Description: ID of the CloudFront distribution
  AppCloudFrontDomainName: # Renamed from CWLCloudFrontDomainName
    Type: String
    Description: Domain name of the CloudFront distribution

Resources:
  PostDeployFunction: # Renamed from PostFrontEndDeployFunction
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "nlmonorepo-${AppName}-postdeploy-${Stage}" # Simplified and parameterized
      Handler: index.handler
      Runtime: nodejs18.x
      Timeout: 600
      Role: !GetAtt PostDeployRole.Arn # Renamed role
      Code:
        ZipFile: |
          const { CloudFront } = require("@aws-sdk/client-cloudfront");
          
          exports.handler = async (event) => {
            console.log('Post front-end deployment handler called');
            
            try {
              const CF = new CloudFront();
              // Env var name changed to be generic, value comes from AppCloudFrontDistributionId parameter
              const distributionId = process.env.AppCloudFrontDistributionId; 
              
              if (distributionId) {
                await CF.createInvalidation({
                  DistributionId: distributionId,
                  InvalidationBatch: {
                    CallerReference: Date.now().toString(),
                    Paths: {
                      Quantity: 1,
                      Items: ["/*"],
                    },
                  },
                });
                console.log(`Created invalidation for distribution ${distributionId}`);
              }
              
              return {
                statusCode: 200,
                body: JSON.stringify({ success: true })
              };
            } catch (error) {
              console.error('Error in handler:', error);
              return {
                statusCode: 500,
                body: JSON.stringify({ error: error.message })
              };
            }
          };
      Environment:
        Variables:
          STAGE: !Ref Stage
          AppCloudFrontDistributionId: !Ref AppCloudFrontDistributionId # Env var name and Ref updated

  PostDeployRole: # Renamed from PostFrontEndDeployRole
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "nlmonorepo-${AppName}-postdeploy-role-${Stage}" # Simplified and parameterized
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CloudFrontInvalidation
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudfront:CreateInvalidation
                  - cloudfront:GetInvalidation
                Resource: "*" # Consider restricting this to the specific distribution ARN if possible

Outputs:
  PostDeployFunctionArn: # Renamed from PostFrontEndDeployFunctionArn
    Value: !GetAtt PostDeployFunction.Arn
    Description: ARN of the post-deploy Lambda function
  
  PostDeployFunctionName: # Renamed from PostFrontEndDeployFunctionName
    Value: !Ref PostDeployFunction
    Description: Name of the post-deploy Lambda function
