AWSTemplateFormatVersion: "2010-09-09"
Description: "Lambda Resources for Application"

Parameters:
  Stage:
    Type: String
    Description: Deployment stage (e.g., dev, prod)
    AllowedPattern: ^[a-zA-Z0-9-]+$
  AppName:
    Type: String
    Description: Application Name (e.g., cwl, wbc)
  AppCloudFrontDistributionId: # Renamed from CWLCloudFrontDistributionId
    Type: String
    Description: ID of the CloudFront distribution
  AppCloudFrontDomainName: # Renamed from CWLCloudFrontDomainName
    Type: String
    Description: Domain name of the CloudFront distribution
  FromEmail:
    Type: String
    Description: Email address to send from (must be verified in SES)
    Default: vesnathan+admin@gmail.com
  AppURL:
    Type: String
    Description: Application URL for generating links
    Default: https://cloudwatchlive.com
  TemplateBucketName:
    Type: String
    Description: S3 bucket name for CloudFormation templates
  UserPoolId:
    Type: String
    Description: Cognito User Pool ID for user creation
  LogRetentionInDays:
    Type: Number
    Description: Number of days to retain CloudWatch Logs for Lambda functions
    Default: 14

Resources:
  PostDeployFunction: # Renamed from PostFrontEndDeployFunction
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "nlmonorepo-${AppName}-postdeploy-${Stage}" # Simplified and parameterized
      Handler: index.handler
      Runtime: nodejs20.x
      Timeout: 600
      Role: !GetAtt PostDeployRole.Arn # Renamed role
      Code:
        ZipFile: |
          const { CloudFront } = require("@aws-sdk/client-cloudfront");

          exports.handler = async (event) => {
            console.log('Post front-end deployment handler called');
            
            try {
              const CF = new CloudFront();
              // Env var name changed to be generic, value comes from AppCloudFrontDistributionId parameter
              const distributionId = process.env.AppCloudFrontDistributionId; 
              
              if (distributionId) {
                await CF.createInvalidation({
                  DistributionId: distributionId,
                  InvalidationBatch: {
                    CallerReference: Date.now().toString(),
                    Paths: {
                      Quantity: 1,
                      Items: ["/*"],
                    },
                  },
                });
                console.log(`Created invalidation for distribution ${distributionId}`);
              }
              
              return {
                statusCode: 200,
                body: JSON.stringify({ success: true })
              };
            } catch (error) {
              console.error('Error in handler:', error);
              return {
                statusCode: 500,
                body: JSON.stringify({ error: error.message })
              };
            }
          };
      Environment:
        Variables:
          STAGE: !Ref Stage
          AppCloudFrontDistributionId: !Ref AppCloudFrontDistributionId # Env var name and Ref updated

  PostDeployRole: # Renamed from PostFrontEndDeployRole
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "nlmonorepo-${AppName}-postdeploy-role-${Stage}" # Simplified and parameterized
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CloudFrontInvalidation
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudfront:CreateInvalidation
                  - cloudfront:GetInvalidation
                Resource: "*" # Consider restricting this to the specific distribution ARN if possible

  SendWelcomeEmailFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "nlmonorepo-${AppName}-send-welcome-email-${Stage}"
      Handler: index.handler
      Runtime: nodejs20.x
      Timeout: 30
      Role: !GetAtt SendWelcomeEmailRole.Arn
      Code:
        S3Bucket: !Ref TemplateBucketName
        S3Key: !Sub "functions/${Stage}/sendWelcomeEmail.zip"
      Environment:
        Variables:
          STAGE: !Ref Stage
          FROM_EMAIL: !Ref FromEmail
          APP_URL: !Ref AppURL

  SendWelcomeEmailRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "nlmonorepo-${AppName}-send-welcome-email-role-${Stage}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SESEmailSending
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: "*"

  CreateCognitoUserFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "nlmonorepo-${AppName}-create-cognito-user-${Stage}"
      Handler: index.handler
      Runtime: nodejs20.x
      Timeout: 30
      Role: !GetAtt CreateCognitoUserRole.Arn
      Code:
        S3Bucket: !Ref TemplateBucketName
        S3Key: !Sub "functions/${Stage}/createCognitoUser.zip"
      Environment:
        Variables:
          STAGE: !Ref Stage
          USER_POOL_ID: !Ref UserPoolId

  CreateCognitoUserRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "nlmonorepo-${AppName}-create-cognito-user-role-${Stage}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CognitoUserManagement
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminAddUserToGroup
                  - cognito-idp:AdminSetUserPassword
                Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}"

  # CloudWatch Log Groups for Lambda functions (must be defined after the Lambda functions)
  # DeletionPolicy: Delete ensures LogGroups are removed when stack is deleted
  PostDeployFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Sub "/aws/lambda/${PostDeployFunction}"
      RetentionInDays: !Ref LogRetentionInDays

  SendWelcomeEmailFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Sub "/aws/lambda/${SendWelcomeEmailFunction}"
      RetentionInDays: !Ref LogRetentionInDays

  CreateCognitoUserFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Sub "/aws/lambda/${CreateCognitoUserFunction}"
      RetentionInDays: !Ref LogRetentionInDays

Outputs:
  PostDeployFunctionArn: # Renamed from PostFrontEndDeployFunctionArn
    Value: !GetAtt PostDeployFunction.Arn
    Description: ARN of the post-deploy Lambda function

  PostDeployFunctionName: # Renamed from PostFrontEndDeployFunctionName
    Value: !Ref PostDeployFunction
    Description: Name of the post-deploy Lambda function

  SendWelcomeEmailFunctionArn:
    Value: !GetAtt SendWelcomeEmailFunction.Arn
    Description: ARN of the send welcome email Lambda function
    Export:
      Name: !Sub "${AppName}-SendWelcomeEmailFunctionArn-${Stage}"

  SendWelcomeEmailFunctionName:
    Value: !Ref SendWelcomeEmailFunction
    Description: Name of the send welcome email Lambda function

  CreateCognitoUserFunctionArn:
    Value: !GetAtt CreateCognitoUserFunction.Arn
    Description: ARN of the create Cognito user Lambda function
    Export:
      Name: !Sub "${AppName}-CreateCognitoUserFunctionArn-${Stage}"

  CreateCognitoUserFunctionName:
    Value: !Ref CreateCognitoUserFunction
    Description: Name of the create Cognito user Lambda function
