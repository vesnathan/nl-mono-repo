/**********************************************************************************************************************
 *                                                                                                                    *
 *  DO NOT EDIT THIS FILE.                                                                                            *
 *                                                                                                                    *
 *  This file is automatically generated by the build process.                                                        *
 *                                                                                                                    *
 *  Source file: ../cloudwatchlive/backend/resources/AppSync/resolvers/users/Mutations/Mutation.createCWLUser.ts                                                                                *
 *                                                                                                                    *
 **********************************************************************************************************************/

// ../../../../tmp/nl_resolver_build_dev_1750834287076/Mutation.createCWLUser.ts
import { util } from "@aws-appsync/utils";

// ../../../../tmp/nl_resolver_build_dev_1750834287076/node_modules/uuid/dist/esm-node/rng.js
import crypto from "crypto";
var rnds8Pool = new Uint8Array(256);
var poolPtr = rnds8Pool.length;
function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    crypto.randomFillSync(rnds8Pool);
    poolPtr = 0;
  }
  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}

// ../../../../tmp/nl_resolver_build_dev_1750834287076/node_modules/uuid/dist/esm-node/stringify.js
var byteToHex = [];
for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).slice(1));
}
function unsafeStringify(arr, offset = 0) {
  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
}

// ../../../../tmp/nl_resolver_build_dev_1750834287076/node_modules/uuid/dist/esm-node/native.js
import crypto2 from "crypto";
var native_default = {
  randomUUID: crypto2.randomUUID
};

// ../../../../tmp/nl_resolver_build_dev_1750834287076/node_modules/uuid/dist/esm-node/v4.js
function v4(options, buf, offset) {
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default = v4;

// ../../../../tmp/nl_resolver_build_dev_1750834287076/Mutation.createCWLUser.ts
function request(ctx) {
  const { input } = ctx.args;
  const identity = ctx.identity;
  if (!identity.groups?.includes("SuperAdmin")) {
    util.error("Unauthorized: Only SuperAdmins can create users.", "Unauthorized");
  }
  const userId = v4_default();
  const now = util.time.nowISO8601();
  const newUserItem = {
    userId,
    ...input,
    userAddedById: identity.username,
    // The SuperAdmin creating this user
    userCreated: now,
    privacyPolicy: false,
    // Default value, can be updated by user later
    termsAndConditions: false
    // Default value, can be updated by user later
    // clientType is not set here; it's derived from Cognito groups by the getCWLUser query resolver
  };
  return {
    operation: "PutItem",
    key: util.dynamodb.toMapValues({ userId }),
    attributeValues: util.dynamodb.toMapValues(newUserItem)
    // condition: {
    //   expression: 'attribute_not_exists(userId)', // Ensure user doesn't already exist
    // },
  };
}
function response(ctx) {
  if (ctx.error) {
    console.error("Error in resolver:", ctx.error);
    if (ctx.error.type === "DynamoDB:ConditionalCheckFailedException") {
      util.error("A user with this ID already exists.", "ConditionalCheckFailedException");
    }
    return util.error(ctx.error.message, ctx.error.type);
  }
  console.log("User creation successful, result:", JSON.stringify(ctx.result));
  const createdUser = ctx.result;
  return {
    userId: createdUser.userId,
    organizationId: createdUser.organizationId,
    userEmail: createdUser.userEmail,
    userTitle: createdUser.userTitle,
    userFirstName: createdUser.userFirstName,
    userLastName: createdUser.userLastName,
    userPhone: createdUser.userPhone,
    userRole: createdUser.userRole,
    privacyPolicy: createdUser.privacyPolicy,
    termsAndConditions: createdUser.termsAndConditions,
    userAddedById: createdUser.userAddedById,
    userCreated: createdUser.userCreated,
    clientType: []
    // Will be populated by getCWLUser based on Cognito groups
  };
}
export {
  request,
  response
};
