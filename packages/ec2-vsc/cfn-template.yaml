
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Minimal EC2 Instance - No networking, no security group, just a basic instance.'

Parameters:
  InstanceType:
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro      # $0.0104/hour (~$7.50/month)
      - t3.small      # $0.0208/hour (~$15/month)
      - t3.medium     # $0.0416/hour (~$30/month)
      - t3.large      # $0.0832/hour (~$60/month)
      - t3.xlarge
      - c5.2xlarge
    Description: EC2 instance type (t3.micro recommended for cost optimization)
  
  AutoStopEnabled:
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
    Description: Enable automatic stop after 2 hours of inactivity
  
  KeyPairName:
    Type: String
    Description: Name of existing EC2 KeyPair to enable SSH access
    Default: "ec2-vsc-key"

  VSCodePort:
    Type: Number
    Default: 8443
    Description: Port for VSCode server (code-server) - HTTPS enabled

Conditions:
  EnableAutoStop: !Equals [!Ref AutoStopEnabled, "true"]

Resources:
  # IAM Role for EC2 instance
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-ec2-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: EC2AutoStopPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:StopInstances
                  - ec2:DescribeInstances
                Resource: '*'
                Condition:
                  StringEquals:
                    'ec2:ResourceTag/aws:cloudformation:stack-name': !Ref 'AWS::StackName'
      
  # Instance Profile for the EC2 role
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  VSCServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and VSCode server access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH access
        - IpProtocol: tcp
          FromPort: !Ref VSCodePort
          ToPort: !Ref VSCodePort
          CidrIp: 0.0.0.0/0
          Description: VSCode server access

  # Launch Template for On-Demand instances
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn: 
      - VSCServerSecurityGroup
      - EC2InstanceProfile
    Properties:
      LaunchTemplateName: !Sub "${AWS::StackName}-launch-template"
      LaunchTemplateData:
        ImageId: !Sub "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64}}"
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyPairName
        IamInstanceProfile:
          Arn: !GetAtt EC2InstanceProfile.Arn
        SecurityGroupIds:
          - !GetAtt VSCServerSecurityGroup.GroupId
        EbsOptimized: true
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 8  # Minimum size for cost optimization
              VolumeType: gp3  # More cost-effective than gp2
              DeleteOnTermination: true
              Encrypted: true
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub "${AWS::StackName}-vscode-server"
              - Key: CostOptimized
                Value: "true"
              - Key: AutoStop
                Value: !Ref AutoStopEnabled
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            exec > /var/log/code-server-install.log 2>&1
            export HOME=/root USER=root
            sleep 30
            
            echo "Starting code-server installation..."
            echo "Instance: $(curl -s http://169.254.169.254/latest/meta-data/instance-type)"
            
            # 1/8: Update system
            echo "📦 Step 1/8: Updating system packages..."
            dnf update -y || yum update -y
            echo "✓ System updated"
            
            # 2/8: Install essential packages
            echo "📦 Step 2/8: Installing essential packages..."
            echo "→ Installing curl..."
            if dnf install -y curl --allowerasing 2>/dev/null || yum install -y curl 2>/dev/null; then
              echo "✅ curl installed"
            else
              echo "❌ curl installation failed"; exit 1
            fi
            
            echo "→ Installing git..."
            if dnf install -y git 2>/dev/null || yum install -y git 2>/dev/null; then
              echo "✅ git installed"
            else
              echo "❌ git installation failed"; exit 1
            fi
            
            echo "→ Installing tar and gzip..."
            if dnf install -y tar gzip 2>/dev/null || yum install -y tar gzip 2>/dev/null; then
              echo "✅ tar and gzip installed"
            else
              echo "❌ tar/gzip installation failed"; exit 1
            fi
            
            echo "→ Installing which and findutils..."
            if dnf install -y which findutils 2>/dev/null || yum install -y which findutils 2>/dev/null; then
              echo "✅ which and findutils installed"
            else
              echo "❌ which/findutils installation failed"; exit 1
            fi
            
            echo "→ Installing unzip..."
            if dnf install -y unzip 2>/dev/null || yum install -y unzip 2>/dev/null; then
              echo "✅ unzip installed"
            else
              echo "⚠️ unzip installation failed - continuing"
            fi
            
            echo "→ Installing openssl..."
            if dnf install -y openssl 2>/dev/null || yum install -y openssl 2>/dev/null; then
              echo "✅ openssl installed"
            else
              echo "⚠️ openssl installation failed - continuing"
            fi
            
            # Verify critical packages
            for cmd in curl git tar gzip which; do
              if ! command -v $cmd &>/dev/null; then echo "❌ $cmd missing"; exit 1; fi
            done
            echo "✓ Essential packages verified"
            
            # 3/8: Install AWS CLI
            echo "📦 Step 3/8: Installing AWS CLI v2..."
            echo "→ Downloading AWS CLI installer..."
            curl -s "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip"
            echo "→ Extracting AWS CLI installer..."
            cd /tmp && unzip -q awscliv2.zip
            echo "→ Installing AWS CLI..."
            ./aws/install
            echo "→ Cleaning up installer files..."
            rm -rf /tmp/awscliv2.zip /tmp/aws
            if ! command -v aws &>/dev/null; then echo "❌ AWS CLI failed"; exit 1; fi
            echo "✅ AWS CLI installed: $(aws --version)"
            
            # 4/8: Install NVM
            echo "📦 Step 4/8: Installing NVM..."
            echo "→ Downloading NVM v0.39.0..."
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
            echo "→ Setting up NVM environment..."
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            if ! command -v nvm &>/dev/null; then echo "❌ NVM failed"; exit 1; fi
            echo "✅ NVM installed: $(nvm --version)"
            
            # 5/8: Install Node.js
            echo "📦 Step 5/8: Installing Node.js..."
            echo "→ Installing latest stable Node.js..."
            nvm install node
            echo "→ Setting Node.js as default..."
            nvm use node && nvm alias default node
            if ! command -v node &>/dev/null; then echo "❌ Node.js failed"; exit 1; fi
            echo "✅ Node.js installed: $(node --version)"
            echo "✅ npm available: $(npm --version)"
            
            # 6/8: Install Yarn
            echo "📦 Step 6/8: Installing Yarn..."
            echo "→ Installing yarn globally via npm..."
            npm install -g yarn
            if ! command -v yarn &>/dev/null; then echo "❌ yarn failed"; exit 1; fi
            echo "✅ yarn installed: $(yarn --version)"
            
            # Create yarn cache directory with proper ownership
            echo "→ Setting up yarn cache directory..."
            sudo -u ec2-user mkdir -p /home/ec2-user/.cache/yarn
            sudo -u ec2-user mkdir -p /home/ec2-user/.config/yarn
            echo "✓ Yarn cache directories ready"
            
            # 7/8: Setup ec2-user environment
            echo "📦 Step 7/8: Setting up ec2-user environment..."
            echo "→ Installing NVM for ec2-user..."
            su - ec2-user << 'EOF'
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            echo "→ Installing Node.js for ec2-user..."
            nvm install node && nvm use node && nvm alias default node
            echo "→ Installing yarn for ec2-user..."
            npm install -g yarn
            echo "→ Installing Claude CLI for ec2-user..."
            npm install -g claude-cli 2>/dev/null || npm install -g @anthropic-ai/cli 2>/dev/null || echo "⚠ Claude CLI install failed"
            echo "→ Configuring shell environment..."
            echo 'export NVM_DIR="$HOME/.nvm"' >> ~/.bashrc
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> ~/.bashrc
            EOF
            
            # Ensure cache directories exist with correct ownership
            echo "→ Setting up cache directories..."
            mkdir -p ~/.cache/yarn ~/.config/yarn ~/.npm ~/.local
            echo "✓ Cache directories ready"
            
            echo "✅ ec2-user environment ready"
            
            # 8/8: Install code-server
            echo "📦 Step 8/8: Installing code-server..."
            echo "→ Setting up installation environment..."
            export HOME=/home/ec2-user
            echo "→ Attempting official code-server installation..."
            if curl -fsSL https://code-server.dev/install.sh | sh; then
              echo "✅ code-server installed via official script"
            else
              echo "⚠ Official script failed, trying manual installation..."
              echo "→ Downloading code-server v4.101.2..."
              VERSION="4.101.2"
              curl -fL -o /tmp/code-server.rpm "https://github.com/coder/code-server/releases/download/v$VERSION/code-server-$VERSION-amd64.rpm"
              echo "→ Installing from RPM package..."
              rpm -U /tmp/code-server.rpm || echo "⚠ RPM install failed"
            fi
            
            echo "→ Verifying code-server installation..."
            if command -v code-server &>/dev/null; then
              echo "✅ code-server verified: $(code-server --version | head -1)"
            else
              echo "⚠ code-server command not found"
            fi
            
            echo "🎉 Package installations complete!"
            echo "📋 Summary: curl, git, tar, gzip, AWS CLI, NVM, Node.js, npm, yarn, code-server"
            
            # Configure code-server
            echo "🔧 Configuring code-server..."
            echo "→ Creating configuration directories..."
            mkdir -p /home/ec2-user/.config/code-server/certs
            
            # Get public IP
            echo "→ Fetching public IP address..."
            PUBLIC_IP=""
            for i in {1..5}; do
              PUBLIC_IP=$(curl -s --max-time 3 http://169.254.169.254/latest/meta-data/public-ipv4 2>/dev/null)
              [ -n "$PUBLIC_IP" ] && break
              sleep 2
            done
            [ -z "$PUBLIC_IP" ] && PUBLIC_IP="localhost"
            echo "✅ Using IP: $PUBLIC_IP"
            
            # Generate SSL certificates
            echo "→ Generating SSL certificates..."
            if openssl genrsa -out /home/ec2-user/.config/code-server/certs/server.key 2048 2>/dev/null; then
              if openssl req -new -x509 -key /home/ec2-user/.config/code-server/certs/server.key \
                -out /home/ec2-user/.config/code-server/certs/server.crt \
                -days 365 -subj "/C=US/ST=AWS/L=Cloud/O=VSCode/CN=$PUBLIC_IP" 2>/dev/null; then
                SSL_ENABLED=true
                chmod 600 /home/ec2-user/.config/code-server/certs/server.key
                chmod 644 /home/ec2-user/.config/code-server/certs/server.crt
                echo "✅ SSL certificates generated successfully"
              else
                SSL_ENABLED=false
                echo "⚠ SSL certificate generation failed"
              fi
            else
              SSL_ENABLED=false
              echo "⚠ SSL key generation failed"
            fi
            
            # Create config
            if [ "$SSL_ENABLED" = true ]; then
              cat > /home/ec2-user/.config/code-server/config.yaml << 'EOF'
            bind-addr: 0.0.0.0:${VSCodePort}
            auth: password
            password: vscodepassword
            cert: /home/ec2-user/.config/code-server/certs/server.crt
            cert-key: /home/ec2-user/.config/code-server/certs/server.key
            session-socket: /tmp/code-server-ipc.sock
            EOF
            else
              cat > /home/ec2-user/.config/code-server/config.yaml << 'EOF'
            bind-addr: 0.0.0.0:8080
            auth: password
            password: vscodepassword
            session-socket: /tmp/code-server-ipc.sock
            EOF
            fi
            
            # Create systemd override for code-server environment variables
            mkdir -p /etc/systemd/system/code-server@.service.d
            cat > /etc/systemd/system/code-server@.service.d/override.conf << 'EOF'
            [Service]
            Environment="CS_DISABLE_GETTING_STARTED_TAB=1"
            Environment="CS_DISABLE_UPDATE_CHECK=1"
            Environment="VSCODE_PROXY_PROCESS_EXIT_TIMEOUT=300000"
            EOF
            
            chown -R ec2-user:ec2-user /home/ec2-user/.config
            
            # Reload systemd to pick up override configuration
            systemctl daemon-reload
            
            # Start service
            echo "Starting code-server service..."
            systemctl enable --now code-server@ec2-user
            sleep 10
            
            # Verify service
            for i in {1..5}; do
              if systemctl is-active --quiet code-server@ec2-user; then
                echo "✓ code-server service started on attempt $i"
                break
              else
                echo "Attempt $i: waiting for service..."
                sleep 5
              fi
              if [ $i -eq 5 ]; then
                echo "❌ Service failed to start"
                systemctl status code-server@ec2-user --no-pager
                exit 1
              fi
            done
            
            # Test connectivity
            PUBLIC_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
            for i in {1..3}; do
              if curl -k -s -o /dev/null -w "%{http_code}" https://localhost:${VSCodePort} | grep -q "200\|302\|401"; then
                echo "✓ code-server responding locally"
                break
              else
                echo "Testing connectivity attempt $i..."
                sleep 5
              fi
            done
            
            echo "✅ code-server accessible at: https://$PUBLIC_IP:${VSCodePort}"
            echo "⚠️ Accept browser security warning for self-signed certificate"
            echo "Password: vscodepassword"
            
            # Auto-stop setup
            if [ "${AutoStopEnabled}" = "true" ]; then
              echo "Setting up auto-stop after 2 hours..."
              cat > /home/ec2-user/auto-stop.sh << 'EOFSTOP'
            #!/bin/bash
            LOG_FILE="/var/log/auto-stop.log"
            INACTIVE_TIME=7200
            echo "$(date): Checking activity..." >> $LOG_FILE
            if netstat -tn | grep -E ":8443.*ESTABLISHED"; then
              echo "$(date): Active connections, continuing" >> $LOG_FILE
              exit 0
            fi
            LAST_ACTIVITY=$(stat -c %Y /var/log/code-server-install.log 2>/dev/null || echo 0)
            CURRENT_TIME=$(date +%s)
            INACTIVE_DURATION=$((CURRENT_TIME - LAST_ACTIVITY))
            if [ $INACTIVE_DURATION -gt $INACTIVE_TIME ]; then
              echo "$(date): Stopping due to inactivity" >> $LOG_FILE
              INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
              REGION=$(curl -s http://169.254.169.254/latest/meta-data/placement/region)
              aws ec2 stop-instances --instance-ids $INSTANCE_ID --region $REGION >> $LOG_FILE 2>&1
            fi
            EOFSTOP
              chmod +x /home/ec2-user/auto-stop.sh
              chown ec2-user:ec2-user /home/ec2-user/auto-stop.sh
              echo "*/30 * * * * /home/ec2-user/auto-stop.sh" | crontab -u ec2-user -
              echo "✓ Auto-stop configured"
            fi
            
            # Fix ownership issues that can occur during installation
            echo "🔧 Fixing file ownership for ec2-user..."
            chown -R ec2-user:ec2-user /home/ec2-user/.cache /home/ec2-user/.config /home/ec2-user/.local /home/ec2-user/.npm 2>/dev/null || true
            chown -R ec2-user:ec2-user /home/ec2-user/.nvm /home/ec2-user/.yarn 2>/dev/null || true
            chown ec2-user:ec2-user /home/ec2-user/.bashrc /home/ec2-user/.profile 2>/dev/null || true
            echo "✓ File ownership fixed"
            
            echo "✅ Installation completed successfully"

  # Actual EC2 Instance using Launch Template
  BasicInstance:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber

Outputs:
  InstanceId:
    Description: EC2 Instance ID
    Value: !Ref BasicInstance
  PublicIP:
    Description: Public IP address of the instance
    Value: !GetAtt BasicInstance.PublicIp
  VSCodeURL:
    Description: VSCode server URL (HTTPS with self-signed certificate)
    Value: !Sub "https://${BasicInstance.PublicIp}:${VSCodePort}"
  SecurityInfo:
    Description: Security information for HTTPS access
    Value: "⚠️ HTTPS uses self-signed certificate - accept browser security warning"
  SSHCommand:
    Description: SSH command to connect to the instance
    Value: !Sub "ssh -i ${KeyPairName}.pem ec2-user@${BasicInstance.PublicIp}"
  IAMRole:
    Description: IAM role assigned to the instance
    Value: !Ref EC2Role
  CostOptimizations:
    Description: Cost optimization features enabled
    Value: !Sub "Instance: ${InstanceType} | Auto-Stop: ${AutoStopEnabled}"
