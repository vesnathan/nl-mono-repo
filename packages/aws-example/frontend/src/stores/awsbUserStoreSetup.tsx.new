"use client";

import { Progress } from "@nextui-org/react";
import { LOGIN_PATH } from "@/constants/layout/navigation/navigation";
import { useUserStore } from "@/stores/userStore";
import { useQuery } from "@tanstack/react-query";
import { DataFetchError } from "@/components/common/DataFetchError";
import { useRouter } from "next/navigation";
import { FC, PropsWithChildren, useEffect, useState } from "react";
import to from "await-to-js";
import { getCurrentUser, fetchAuthSession } from "aws-amplify/auth";
import {
  getAWSEUserQueryFn,
  getAWSEUserQueryKey,
} from "../graphql/queries/userQueries";
import { ClientType } from "@/types/gqlTypes";

type Props = PropsWithChildren & {
  userId: string;
};

export const AWSEUserStoreSetup: FC<Props> = ({ userId, children }) => {
  const setUser = useUserStore((state) => state.setUser);
  const router = useRouter();
  
  // We'll always set a default client type
  const [clientTypes, setClientTypes] = useState<ClientType[]>([ClientType.UnauthenticatedUser]);

  const queryKey = getAWSEUserQueryKey(userId);

  const { data, error, isPending } = useQuery({
    retry: false,
    queryFn: () => getAWSEUserQueryFn({ userId }),
    queryKey,
  });

  // Extract the user data
  const AWSEUser = data?.data?.getAWSEUser;

  // Try to get Cognito user to extract groups
  useEffect(() => {
    const getCognitoUserInfo = async () => {
      try {
        // Get client types from Cognito user groups
        const userSession = await fetchAuthSession();
        const cognitoGroups = userSession?.tokens?.idToken?.payload["cognito:groups"] || [];
        
        if (cognitoGroups.length > 0) {
          console.log('Found Cognito groups:', cognitoGroups);
          
          // Map Cognito groups to ClientType enum values
          const mappedClientTypes: ClientType[] = [];

          for (const group of cognitoGroups) {
            // Map Cognito groups to ClientType values
            switch (group) {
              case 'SiteAdmin':
                mappedClientTypes.push(ClientType.SiteAdmin);
                break;
              case 'AuthenticatedUser':
                mappedClientTypes.push(ClientType.AuthenticatedUser);
                break;
              case 'UnauthenticatedUser':
              default:
                mappedClientTypes.push(ClientType.UnauthenticatedUser);
                break;
            }
          }
          
          // If we found valid client types, update the state
          if (mappedClientTypes.length > 0) {
            setClientTypes(mappedClientTypes);
          }
        }
      } catch (err) {
        console.error("Error getting Cognito groups:", err);
      }
    };
    
    getCognitoUserInfo();
  }, []);

  // Update user in store when GraphQL data is available
  useEffect(() => {
    if (data?.data?.getAWSEUser) {
      // Use clientType from GraphQL response if available, otherwise use our state
      const userWithClientType = {
        ...data.data.getAWSEUser,
        clientType: data.data.getAWSEUser.clientType?.length > 0 
          ? data.data.getAWSEUser.clientType 
          : clientTypes
      };
      
      setUser(userWithClientType);
    }
  }, [data, setUser, clientTypes]);

  if (isPending) {
    return (
      <Progress size="sm" isIndeterminate aria-label="Loading user data" />
    );
  }

  if (error || !AWSEUser) {
    return (
      <DataFetchError
        error={error}
        errorMessage="Unable to fetch user data"
        retry={() => {
          router.replace(LOGIN_PATH);
        }}
      />
    );
  }

  // eslint-disable-next-line react/jsx-no-useless-fragment
  return <>{children}</>;
};
