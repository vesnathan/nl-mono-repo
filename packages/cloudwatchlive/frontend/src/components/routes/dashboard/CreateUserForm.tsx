import React from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { CWLUserInput, ClientType } from '@/types/gqlTypes'; // Assuming gqlTypes is correctly aliased
import { Button, Input, ModalBody, ModalFooter, Select, SelectItem } from '@nextui-org/react';
import { createCWLUserMutationFn } from '@/graphql/mutations/userMutations'; // Import the mutation function
import { useMutation } from '@tanstack/react-query'; // Assuming TanStack Query is used
import { SALUTATIONS, SalutationValue } from '@/../shared/constants/salutations';

// Define the Zod schema for form validation
const createUserSchema = z.object({
  userEmail: z.string().email({ message: 'Invalid email address' }),
  userFirstName: z.string().min(1, { message: 'First name is required' }),
  userLastName: z.string().min(1, { message: 'Last name is required' }),
  userTitle: z.custom<SalutationValue>().optional(),
  userPhone: z.string().optional(),
  organizationId: z.string().min(1, { message: 'Organization ID is required' }),
  userRole: z.string().min(1, { message: 'User role is required' }),
  // clientType: z.array(z.nativeEnum(ClientType)).min(1, { message: 'Client type is required' })
});

type CreateUserFormData = z.infer<typeof createUserSchema>;

interface CreateUserFormProps {
  onClose: () => void;
  onSubmitSuccess: () => void;
}

export const CreateUserForm: React.FC<CreateUserFormProps> = ({ onClose, onSubmitSuccess }) => {
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<CreateUserFormData>({
    resolver: zodResolver(createUserSchema),
  });

  const createUserMutation = useMutation({
    mutationFn: async (data: CreateUserFormData) => {
      // Map form data to CWLUserInput
      const input: CWLUserInput = {
        userEmail: data.userEmail,
        userFirstName: data.userFirstName,
        userLastName: data.userLastName,
        userTitle: data.userTitle || '',
        userPhone: data.userPhone || '',
        organizationId: data.organizationId,
        userRole: data.userRole,
        // Assuming these are not set at creation or have defaults
        // userId: '', // Typically generated by the backend
        // userAddedById: '', // This might be the current user's ID
        // privacyPolicy: false, // Default or set elsewhere
        // termsAndConditions: false, // Default or set elsewhere
        // userCreated: '', // Typically set by the backend
        // clientType: data.clientType, // If you add clientType to the form
      };
      return createCWLUserMutationFn(input);
    },
    onSuccess: () => {
      // console.log('User created successfully');
      onSubmitSuccess();
    },
    onError: (error: Error) => {
      // console.error('Error creating user:', error);
      // Handle error display to user, e.g., using a toast notification
      // For now, we can re-throw or log to a more persistent store if needed
      alert(`Error creating user: ${error.message}`); // Simple alert for now
    },
  });

  const processForm = (data: CreateUserFormData) => {
    createUserMutation.mutate(data);
  };

  // Example organization IDs - replace with actual data fetching or props
  const organizations = [
    { id: 'org1', name: 'Organization 1' },
    { id: 'org2', name: 'Organization 2' },
  ];

  // Example user roles - replace with actual data or make it a free text
  const roles = [
    { id: 'role1', name: 'Admin' },
    { id: 'role2', name: 'Editor' },
    { id: 'role3', name: 'Viewer' },
  ];

  return (
    <form onSubmit={handleSubmit(processForm)}>
      <ModalBody>
        <Input
          {...register('userEmail')}
          placeholder="Email"
          errorMessage={errors.userEmail?.message}
          isInvalid={!!errors.userEmail}
        />
        <Input
          {...register('userFirstName')}
          placeholder="First Name"
          errorMessage={errors.userFirstName?.message}
          isInvalid={!!errors.userFirstName}
        />
        <Input
          {...register('userLastName')}
          placeholder="Last Name"
          errorMessage={errors.userLastName?.message}
          isInvalid={!!errors.userLastName}
        />
        <Select
          {...register('userTitle')}
          placeholder="Title (Optional)"
          aria-label="Select Title"
        >
          {SALUTATIONS.map((salutation) => (
            <SelectItem key={salutation.id} value={salutation.value}>
              {salutation.value}
            </SelectItem>
          ))}
        </Select>
        <Input
          {...register('userPhone')}
          placeholder="Phone (Optional)"
        />
        <Select
          placeholder="Organization"
          {...register('organizationId')}
          errorMessage={errors.organizationId?.message}
          isInvalid={!!errors.organizationId}
        >
          {organizations.map((org) => (
            <SelectItem key={org.id} value={org.id}>
              {org.name}
            </SelectItem>
          ))}
        </Select>
        <Input
          {...register('userRole')}
          placeholder="User Role"
          errorMessage={errors.userRole?.message}
          isInvalid={!!errors.userRole}
        />
      </ModalBody>
      <ModalFooter>
        <Button color="danger" variant="light" onPress={onClose}>
          Cancel
        </Button>
        <Button color="primary" type="submit" isLoading={createUserMutation.isPending} className="font-bold">
          Create User
        </Button>
      </ModalFooter>
    </form>
  );
};
