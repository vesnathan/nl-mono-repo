/**
 * Frontend utility to read CloudFormation deployment outputs
 * This utility reads from the deployment-outputs.json file generated by the deployment system
 */

import fs from "fs";
import path from "path";

export interface StackOutput {
  OutputKey: string;
  OutputValue: string;
  Description?: string;
  ExportName?: string;
}

export interface DeploymentOutputs {
  stage: string;
  lastUpdated: string;
  stacks: {
    waf?: {
      region: string;
      stackName: string;
      outputs: StackOutput[];
    };
    shared?: {
      region: string;
      stackName: string;
      outputs: StackOutput[];
    };
    cwl?: {
      region: string;
      stackName: string;
      outputs: StackOutput[];
    };
  };
}

export interface CWLDeploymentConfig {
  userPoolId: string;
  userPoolClientId: string;
  identityPoolId: string;
  graphQLUrl: string;
  region: string;
  webACLArn?: string;
  cloudfrontDistributionId?: string;
}

export class DeploymentConfigReader {
  private static instance: DeploymentConfigReader;

  private deploymentOutputs: DeploymentOutputs | null = null;

  private outputsFilePath: string;

  private constructor() {
    // Path to the deployment outputs file relative to the frontend
    this.outputsFilePath = path.join(
      __dirname,
      "../../../../../deploy/deployment-outputs.json",
    );
  }

  public static getInstance(): DeploymentConfigReader {
    if (!DeploymentConfigReader.instance) {
      DeploymentConfigReader.instance = new DeploymentConfigReader();
    }
    return DeploymentConfigReader.instance;
  }

  /**
   * Load deployment outputs from the file
   */
  private loadDeploymentOutputs(): DeploymentOutputs {
    if (this.deploymentOutputs) {
      return this.deploymentOutputs;
    }

    try {
      if (!fs.existsSync(this.outputsFilePath)) {
        throw new Error(
          `Deployment outputs file not found at ${this.outputsFilePath}. ` +
            "Please ensure stacks are deployed first.",
        );
      }

      const fileContent = fs.readFileSync(this.outputsFilePath, "utf8");
      this.deploymentOutputs = JSON.parse(fileContent);

      if (!this.deploymentOutputs) {
        throw new Error("Invalid deployment outputs file format");
      }

      return this.deploymentOutputs;
    } catch (error) {
      throw new Error(
        `Failed to load deployment outputs: ${error instanceof Error ? error.message : String(error)}`,
      );
    }
  }

  /**
   * Get a specific output value from a stack
   */
  public getStackOutput(
    stackType: "waf" | "shared" | "cwl",
    outputKey: string,
  ): string {
    const outputs = this.loadDeploymentOutputs();
    const stack = outputs.stacks[stackType];

    if (!stack) {
      throw new Error(
        `Stack ${stackType} outputs not found. Ensure the stack is deployed.`,
      );
    }

    const output = stack.outputs.find((o) => o.OutputKey === outputKey);
    if (!output) {
      throw new Error(
        `Output ${outputKey} not found in ${stackType} stack. ` +
          `Available outputs: ${stack.outputs.map((o) => o.OutputKey).join(", ")}`,
      );
    }

    return output.OutputValue;
  }

  /**
   * Get all outputs from a specific stack
   */
  public getStackOutputs(stackType: "waf" | "shared" | "cwl"): StackOutput[] {
    const outputs = this.loadDeploymentOutputs();
    const stack = outputs.stacks[stackType];

    if (!stack) {
      throw new Error(
        `Stack ${stackType} outputs not found. Ensure the stack is deployed.`,
      );
    }

    return stack.outputs;
  }

  /**
   * Get CWL configuration for Amplify setup
   */
  public getCWLConfig(): CWLDeploymentConfig {
    try {
      // Get CWL stack outputs
      const userPoolId = this.getStackOutput("cwl", "UserPoolId");
      const userPoolClientId = this.getStackOutput("cwl", "UserPoolClientId");
      const identityPoolId = this.getStackOutput("cwl", "IdentityPoolId");
      const graphQLUrl = this.getStackOutput("cwl", "GraphQLApiUrl");

      // Get shared stack outputs
      const region =
        this.getStackOutput("shared", "Region") || "ap-southeast-2";

      // Optional WAF outputs
      let webACLArn: string | undefined;
      let cloudfrontDistributionId: string | undefined;

      try {
        webACLArn = this.getStackOutput("waf", "WebACLArn");
      } catch {
        // WAF outputs are optional
      }

      try {
        cloudfrontDistributionId = this.getStackOutput(
          "cwl",
          "CloudFrontDistributionId",
        );
      } catch {
        // CloudFront distribution ID is optional
      }

      return {
        userPoolId,
        userPoolClientId,
        identityPoolId,
        graphQLUrl,
        region,
        webACLArn,
        cloudfrontDistributionId,
      };
    } catch (error) {
      throw new Error(
        `Failed to get CWL configuration: ${error instanceof Error ? error.message : String(error)}. ` +
          "Please ensure all required stacks (shared, cwl) are deployed.",
      );
    }
  }

  /**
   * Get deployment information
   */
  public getDeploymentInfo(): {
    stage: string;
    lastUpdated: string;
    deployedStacks: string[];
  } {
    const outputs = this.loadDeploymentOutputs();
    const deployedStacks = Object.keys(outputs.stacks);

    return {
      stage: outputs.stage,
      lastUpdated: outputs.lastUpdated,
      deployedStacks,
    };
  }

  /**
   * Check if a specific stack is deployed
   */
  public isStackDeployed(stackType: "waf" | "shared" | "cwl"): boolean {
    try {
      const outputs = this.loadDeploymentOutputs();
      return !!outputs.stacks[stackType];
    } catch {
      return false;
    }
  }

  /**
   * Refresh the deployment outputs (re-read from file)
   */
  public refresh(): void {
    this.deploymentOutputs = null;
  }
}

// Export singleton instance for easy access
export const deploymentConfig = DeploymentConfigReader.getInstance();
