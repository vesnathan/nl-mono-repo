# This file should only extend Query and Mutation types or define types specific to this AppSync API's user handling
# if they are NOT already defined in shared/types.

# Assuming CWLUser, ClientType, and CreateCWLUserInput are defined in shared/types
# and will be merged by the buildGql.ts script.

type Mutation {
  # Creates a new CWL User
  createCWLUser(input: CWLUserInput!): CWLUser # Changed CreateCWLUserInput to CWLUserInput
}

type Query {
  # Retrieves a CWLUser by their ID (Cognito Sub)
  getCWLUser(userId: String!): CWLUser
    @aws_cognito_user_pools # Directive for AppSync authorization
}

# The actual definitions for CWLUser, CreateCWLUserInput, and ClientType
# should come from the .graphql files in packages/shared/types/
# and be merged by your build scripts.
# Example (these would be in a file like packages/shared/types/userTypes.graphql):
#
# input CreateCWLUserInput {
#   organizationId: String!
#   userEmail: String!
#   userTitle: String
#   userFirstName: String!
#   userLastName: String!
#   userPhone: String!
#   userRole: String!
# }
#
# type CWLUser {
#   userId: String!
#   organizationId: String!
#   userEmail: String!
#   userTitle: String
#   userFirstName: String!
#   userLastName: String!
#   userPhone: String!
#   userRole: String!
#   privacyPolicy: Boolean
#   termsAndConditions: Boolean
#   userAddedById: String
#   userCreated: String!
#   clientType: [ClientType!]!
# }
#
# enum ClientType {
#   SuperAdmin
#   EventCompanyAdmin
#   EventCompanyStaff
#   TechCompanyAdmin
#   TechCompanyStaff
#   RegisteredAttendee # Corrected typo
#   UnregisteredAttendee
# }

schema {
  query: Query
  mutation: Mutation # Added Mutation here
}

# Ensure that Query, Mutation, CWLUser, ClientType, and CreateCWLUserInput are primarily defined in users.graphql

# Import all necessary types and operations from users.graphql
# The GraphQL spec typically handles imports by making all definitions from the imported file available.
# Specific tooling might have different ways of handling or requiring these import statements.
# For AWS AppSync, often you combine schemas before deployment or reference them in a way the service understands.

# If your tooling merges .graphql files, these imports might be directives for that tooling.
# If AppSync is directly consuming multiple .graphql files (e.g. via CloudFormation pointing to a directory or multiple files),
# then these explicit import lines might not be standard GraphQL but a specific directive for that setup.

# Assuming standard GraphQL or a tool that understands these comments for merging:
# The types Query, Mutation, CWLUser, ClientType, CreateCWLUserInput will be pulled from users.graphql

# import Mutation.* from "./users.graphql" # This imports all Mutations
# import Query.* from "./users.graphql"   # This imports all Queries
# import CWLUser.* from "./users.graphql" # This imports the CWLUser type
# import ClientType.* from "./users.graphql" # This imports the ClientType enum
# import CreateCWLUserInput.* from "./users.graphql" # This imports the CreateCWLUserInput input type

# It's generally better to have a single point of definition.
# The schema block above defines that a Query and Mutation type exist.
# The actual fields for Query and Mutation should come from users.graphql if that's where they are defined.

# If your build process concatenates all .graphql files in the schema/ directory, 
# then you don't need these import lines, and you must ensure no duplicate definitions across files.
# Let's assume users.graphql contains the full definitions for Query, Mutation, and related user types.
# And this schema.graphql is the entry point that might reference them or be combined.

# For clarity and to avoid re-definitions if files are simply concatenated:
# Remove explicit Query definition if it's fully in users.graphql
# type Query {
# getCWLUser(userId: String!): CWLUser
# @aws_cognito_user_pools
# }

# The @aws_cognito_user_pools directive would be on the getCWLUser field within users.graphql if that's its definition source.






enum ClientType {
  SuperAdmin
  EventCompanyAdmin
  EventCompanyStaff
  TechCompanyAdmin
  TechCompanyStaff
  RegisteredAttendee # Corrected typo
  UnregisteredAttendee
}

type CWLUser @aws_cognito_user_pools {
  userId: String!
  organizationId: String!
  privacyPolicy: Boolean!
  termsAndConditions: Boolean!
  userAddedById: String!
  userCreated: String!
  userEmail: String!
  userTitle: String!
  userFirstName: String!
  userLastName: String!
  userPhone: String!
  userRole: String!
  clientType: [ClientType!]!
}


input CWLUserInput {
  userEmail: String!
  userTitle: String!
  userFirstName: String!
  userLastName: String!
  userPhone: String!
  organizationId: String!
  userRole: String!
}

# These types are added by AppSync. We redefined them here so that it works with "graphql-schema-typescript" package
# These shouldn't be included in schema file otherwise it'll complain about duplicate type definition

# Scalar type: https://docs.aws.amazon.com/appsync/latest/devguide/scalars.html
scalar AWSDate
scalar AWSTime
scalar AWSDateTime
scalar AWSTimestamp
scalar AWSEmail
scalar AWSJSON
scalar AWSURL
scalar AWSPhone
scalar AWSIPAddress

# auth directives https://docs.aws.amazon.com/appsync/latest/devguide/security-authz.html#using-additional-authorization-modes
directive @aws_subscribe(mutations: [String!]!) on FIELD_DEFINITION
directive @aws_auth(cognito_groups: [String!]!) on FIELD_DEFINITION
directive @aws_api_key on FIELD_DEFINITION | OBJECT
directive @aws_iam on FIELD_DEFINITION | OBJECT
directive @aws_oidc on FIELD_DEFINITION | OBJECT
directive @aws_cognito_user_pools(cognito_groups: [String!]) on FIELD_DEFINITION | OBJECT