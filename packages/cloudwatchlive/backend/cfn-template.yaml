AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudWatch Live Backend Infrastructure'

Parameters:
  Stage:
    Type: String
    Description: Deployment stage (e.g., dev, prod)
    AllowedPattern: ^[a-zA-Z0-9-]+$
  TemplatesBucketName:
    Type: String
    Description: Name of the S3 bucket containing nested stack templates
  
  # Parameters for shared resources
  SharedKMSKeyId:
    Type: String
    Description: KMS Key ID from shared stack
    Default: ""
  SharedKMSKeyArn:
    Type: String
    Description: KMS Key ARN from shared stack
    Default: ""
  SharedSecurityGroupId:
    Type: String
    Description: Security Group ID from shared VPC stack
    Default: ""


Resources:
  CognitoStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${TemplatesBucketName}.s3.${AWS::Region}.amazonaws.com/resources/Cognito/cognito.yaml 
      Parameters:
        Stage: !Ref Stage
        AppName: cwl

  DynamoDBStack:
    Type: AWS::CloudFormation::Stack
    DependsOn: CognitoStack 
    Properties:
      TemplateURL: !Sub https://${TemplatesBucketName}.s3.${AWS::Region}.amazonaws.com/resources/DynamoDb/dynamoDb.yaml 
      Parameters:
        Stage: !Ref Stage
        KMSKeyArn: !Ref SharedKMSKeyArn 
        AppName: cwl

  S3Stack:
    Type: AWS::CloudFormation::Stack
    DependsOn: CognitoStack 
    Properties:
      TemplateURL: !Sub https://${TemplatesBucketName}.s3.${AWS::Region}.amazonaws.com/resources/S3/s3.yaml 
      Parameters:
        Stage: !Ref Stage
        KMSKeyId: !Ref SharedKMSKeyId
        AppName: cwl

  CloudFrontStack:
    Type: AWS::CloudFormation::Stack
    DependsOn: S3Stack
    Properties:
      TemplateURL: !Sub https://${TemplatesBucketName}.s3.${AWS::Region}.amazonaws.com/resources/CloudFront/cloudfront.yaml 
      Parameters:
        Stage: !Ref Stage
        AppName: cwl # Added AppName parameter
        AppBucketName: !GetAtt S3Stack.Outputs.CWLBucketName # Parameter name changed
        AppBucketArn: !GetAtt S3Stack.Outputs.CWLBucketArn # Parameter name changed
        AppBucketRegionalDomainName: !GetAtt S3Stack.Outputs.CWLBucketRegionalDomainName # Parameter name changed

  AppSyncStack:
    Type: AWS::CloudFormation::Stack
    DependsOn: [DynamoDBStack, CognitoStack] 
    Properties:
      TemplateURL: !Sub https://${TemplatesBucketName}.s3.${AWS::Region}.amazonaws.com/resources/AppSync/appsync.yaml 
      Parameters:
        Stage: !Ref Stage
        TemplateBucketName: !Ref TemplatesBucketName
        UserPoolId: !GetAtt CognitoStack.Outputs.cwlUserPoolId

  LambdaStack:
    Type: AWS::CloudFormation::Stack
    DependsOn: [CloudFrontStack, AppSyncStack, CognitoStack] 
    Properties:
      TemplateURL: !Sub https://${TemplatesBucketName}.s3.${AWS::Region}.amazonaws.com/resources/Lambda/lambda.yaml 
      Parameters:
        Stage: !Ref Stage
        AppName: cwl # Added AppName parameter
        # Pass the outputs from the CloudFrontStack (which are now generic)
        AppCloudFrontDistributionId: !GetAtt CloudFrontStack.Outputs.CloudFrontDistributionId # Parameter name changed, and got from new child output name
        AppCloudFrontDomainName: !GetAtt CloudFrontStack.Outputs.CloudFrontDomainName # Parameter name changed, and got from new child output name
        # CWLUserPoolId is an output from CognitoStack. Lambda template doesn't currently take it as input.
        # If it were needed: AppUserPoolId: !GetAtt CognitoStack.Outputs.cwlUserPoolId

Outputs:
  # Cognito Outputs
  CWLUserPoolId:
    Value: !GetAtt CognitoStack.Outputs.cwlUserPoolId # Ensure this output name matches what's in your cognito.yaml
    Export:
      Name: !Sub CWLUserPoolId-${Stage}

  # S3 Outputs
  CWLBucketName:
    Value: 
      Fn::GetAtt: [S3Stack, Outputs.CWLBucketName] # Ensure this output name matches what's in your s3.yaml
    Export:
      Name: !Sub CWLBucketName-${Stage}
  
  CWLBucketArn:
    Value: 
      Fn::GetAtt: [S3Stack, Outputs.CWLBucketArn] # Ensure this output name matches what's in your s3.yaml
    Export:
      Name: !Sub CWLBucketArn-${Stage}

  # DynamoDB Outputs  
  CWLDataTableName:
    Value: 
      Fn::GetAtt: [DynamoDBStack, Outputs.CWLDataTableName] # Ensure this output name matches what's in your dynamoDb.yaml
    Export:
      Name: !Sub CWLDataTableName-${Stage}
  
  CWLDataTableArn:
    Value: 
      Fn::GetAtt: [DynamoDBStack, Outputs.CWLDataTableArn] # Ensure this output name matches what's in your dynamoDb.yaml
    Export:
      Name: !Sub CWLDataTableArn-${Stage}

  # AppSync Outputs
  CWLAppsyncUrl:
    Value: 
      Fn::GetAtt: [AppSyncStack, Outputs.AppsyncUrl] # Get from new child output name
    Export:
      Name: !Sub CWLAppsyncUrl-${Stage}
  
  CWLAppsyncRealtimeUrl:
    Value: 
      Fn::GetAtt: [AppSyncStack, Outputs.AppsyncRealtimeUrl] # Get from new child output name
    Export:
      Name: !Sub CWLAppsyncRealtimeUrl-${Stage}

  CWLAppSyncApiId: # Added AppSync API ID Output
    Value: !GetAtt AppSyncStack.Outputs.AppSyncApiId
    Description: "CWL AppSync API ID"
    Export:
      Name: !Sub CWLAppSyncApiId-${Stage}
  
  # CloudFront Outputs
  CWLCloudFrontDistributionId:
    Value: 
      Fn::GetAtt: [CloudFrontStack, Outputs.CloudFrontDistributionId] # Get from new child output name
    Export:
      Name: !Sub CWLCloudFrontDistributionId-${Stage}
  
  CWLCloudFrontDomainName:
    Value: 
      Fn::GetAtt: [CloudFrontStack, Outputs.CloudFrontDomainName] # Get from new child output name
    Export:
      Name: !Sub CWLCloudFrontDomainName-${Stage}

  # Lambda outputs if needed, e.g.:
  # CWLPostDeployFunctionArn:
  #   Value: !GetAtt LambdaStack.Outputs.PostDeployFunctionArn
  #   Export:
  #     Name: !Sub CWLPostDeployFunctionArn-${Stage}
