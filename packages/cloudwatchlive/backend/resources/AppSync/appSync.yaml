name: cwl-appsync-api-${opt:stage}
authentication:
  type: AMAZON_COGNITO_USER_POOLS
  config:
    userPoolId: !ImportValue cwlUserPoolId-${opt:stage}
    defaultEffect: ALLOW
additionalAuthentications:
  - type: AWS_IAM
      
schema:
  - resources/AppSync/**/*.graphql
  - ../../shared/types/**/*.graphql

resolvers:
  Query.getCWLUser:
    dataSource: cwlUserTable
    kind: UNIT
    code: ./resources/AppSync/resolvers/users/Queries/Query.getCWLUser.ts
    

  Mutation.saveSuperAdminClient:
    kind: PIPELINE
    functions:
      - dataSource:
          type: AWS_LAMBDA
          config:
            function:
              timeout: 900
              name: cwl-${opt:stage}-mutation-createCognitoUser
              handler: "resources/AppSync/resolvers/users/Mutations/Mutation_createCognitoUser.handler"          
              iamRoleStatementsName: cwl-mutation-createCognitoUser-iam-role-${opt:stage}
              iamRoleStatements:
                - Effect: Allow
                  Action: 
                  - "cognito-idp:AdminCreateUser"
                  - "cognito-idp:ListUsers"
                  Resource: !ImportValue cwlUserPoolArn-${opt:stage}               
              vpc:
                securityGroupIds:
                  - !ImportValue cwlSecurityGroupFromSharedVPCId-${opt:stage}
                subnetIds:
                  - !ImportValue privateSubnet1-${opt:stage}
                  - !ImportValue privateSubnet2-${opt:stage}
      - dataSource:
          type: AWS_LAMBDA
          config:
            function:
              timeout: 900
              name: cwl-${opt:stage}-mutation-addUserToGroup
              handler: "resources/AppSync/resolvers/users/Mutations/Mutation_addUserToGroup.handler"
              iamRoleStatementsName: cwl-mutation-addUserToGroup-iam-role-${opt:stage}
              iamRoleStatements:
                - Effect: Allow
                  Action: 
                  - "cognito-idp:AdminAddUserToGroup"
                  Resource: !ImportValue cwlUserPoolArn-${opt:stage}             
              vpc:
                securityGroupIds:
                  - !ImportValue cwlSecurityGroupFromSharedVPCId-${opt:stage}
                subnetIds:
                  - !ImportValue privateSubnet1-${opt:stage}
                  - !ImportValue privateSubnet2-${opt:stage}
      - dataSource:
          type: AWS_LAMBDA
          config:
            function:
              timeout: 900
              name: cwl-${opt:stage}-mutation-createCWLUser
              handler: "resources/AppSync/resolvers/users/Mutations/Mutation_createCWLUser.handler"
              iamRoleStatementsName: cwl-mutation-createCWLUser-iam-role-${opt:stage}
              iamRoleStatements:
                - Effect: Allow
                  Action: 
                  - "dynamodb:PutItem"
                  Resource: !ImportValue cwlUserTableArn-${opt:stage}         
              vpc:
                securityGroupIds:
                  - !ImportValue cwlSecurityGroupFromSharedVPCId-${opt:stage}
                subnetIds:
                  - !ImportValue privateSubnet1-${opt:stage}
                  - !ImportValue privateSubnet2-${opt:stage}

  Mutation.associateSoftwareToken:
    kind: UNIT
    dataSource:
      type: AWS_LAMBDA
      config:
        function:
          timeout: 900
          name: cwl-${opt:stage}-mutation-Mutation_associateSoftwareToken
          handler: "./resources/AppSync/resolvers/users/Mutations/Mutation_associateSoftwareToken.handler"
          vpc:
            securityGroupIds:
              - !ImportValue cwlSecurityGroupFromSharedVPCId-${opt:stage}
            subnetIds:
              - !ImportValue privateSubnet1-${opt:stage}
              - !ImportValue privateSubnet2-${opt:stage}
          iamRoleStatementsName: cwl-mutation-associateSoftwareToken-iam-role-${opt:stage}
          iamRoleStatements:
            - Effect: Allow
              Action: 
              - "cognito-idp:associateSoftwareToken"
              Resource: !ImportValue cwlUserPoolArn-${opt:stage}

  Mutation.verifySoftwareToken:
    kind: UNIT
    dataSource:
      type: AWS_LAMBDA
      config:
        function:
          name: cwl-${opt:stage}-mutation-Mutation_verifySoftwareToken
          handler: "./resources/AppSync/resolvers/users/Mutations/Mutation_verifySoftwareToken.handler"
          timeout: 900
          vpc:
            securityGroupIds:
              - !ImportValue cwlSecurityGroupFromSharedVPCId-${opt:stage}
            subnetIds:
              - !ImportValue privateSubnet1-${opt:stage}
              - !ImportValue privateSubnet2-${opt:stage}
          iamRoleStatementsName: cwl-mutation-verifySoftwareToken-iam-role-${opt:stage}
          iamRoleStatements:
            - Effect: Allow
              Action: "cognito-idp:verifySoftwareToken"
              Resource: !ImportValue cwlUserPoolArn-${opt:stage}

  Mutation.adminSetUserMFAPreference:
    kind: UNIT
    dataSource:
      type: AWS_LAMBDA
      config:
        function:
          name: cwl-${opt:stage}-mutation-adminSetUserMFAPreference
          handler: "./resources/AppSync/resolvers/users/Mutations/Mutation_adminSetUserMFAPreference.handler"
          vpc:
            securityGroupIds:
              - !ImportValue cwlSecurityGroupFromSharedVPCId-${opt:stage}
            subnetIds:
              - !ImportValue privateSubnet1-${opt:stage}
              - !ImportValue privateSubnet2-${opt:stage}
          iamRoleStatementsName: cwl-mutation-adminSetUserMFAPreference-iam-role-${opt:stage}
          iamRoleStatements:
            - Effect: Allow
              Action: "cognito-idp:AdminSetUserMFAPreference"
              Resource: !ImportValue cwlUserPoolArn-${opt:stage}
  # endregion user


  

dataSources:
  cwlDataTable:
    type: AMAZON_DYNAMODB
    config:
      tableName: !Ref cwlDataTable
  cwlUserTable:
    type: AMAZON_DYNAMODB
    config:
      tableName: !ImportValue cwlUserTableName-${opt:stage}


